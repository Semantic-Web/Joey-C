<?xml version="1.0"?>
<project name="Pellet" default="dist" basedir=".">
	<description> Pellet is a description logic reasoner built for the Web Ontology Language
		(OWL). </description>
	
	<!-- Read user properties -->
	<property file="build.properties"/>
	<property file="${user.home}/build.properties"/>
	
	<!-- Enviroment -->
	<property environment="env"/>
	
	<!-- Global Properties -->
	<property name="cli.dir" location="cli"/>
	<property name="core.dir" location="core"/>
	<property name="datatypes.dir" location="datatypes"/>
	<property name="el.dir" location="el"/>
	<property name="examples.dir" location="examples"/>
	<property name="explanation.dir" location="explanation"/>
	<property name="jena.dir" location="jena"/>
	<property name="modularity.dir" location="modularity"/>
	<property name="owlapiv3.dir" location="owlapiv3"/>
	<property name="pellint.dir" location="pellint"/>
	<property name="profiler.dir" location="profiler"/>
	<property name="query.dir" location="query"/>
	<property name="rules.dir" location="rules"/>
	<property name="test.dir" location="test"/>
	
	<property name="cli.src.dir" location="${cli.dir}/src"/>
	<property name="core.src.dir" location="${core.dir}/src"/>
	<property name="datatypes.src.dir" location="${datatypes.dir}/src"/>
	<property name="el.src.dir" location="${el.dir}/src"/>
	<property name="examples.src.dir" location="${examples.dir}/src"/>
	<property name="explanation.src.dir" location="${explanation.dir}/src"/>
	<property name="jena.src.dir" location="${jena.dir}/src"/>
	<property name="modularity.src.dir" location="${modularity.dir}/src"/>
	<property name="owlapiv3.src.dir" location="${owlapiv3.dir}/src"/>
	<property name="pellint.src.dir" location="${pellint.dir}/src"/>
	<property name="profiler.src.dir" location="${profiler.dir}/src"/>
	<property name="query.src.dir" location="${query.dir}/src"/>
	<property name="query.grammar.src.dir" location="${query.dir}/antlr"/>
	<property name="query.gensrc.root.dir" location="${query.dir}/gen-src"/>
	<property name="query.genparser.src.dir" location="${query.gensrc.root.dir}/com/clarkparsia/sparqlowl/parser/antlr"/>
	<property name="rules.src.dir" location="${rules.dir}/src"/>
	<property name="test.src.dir" location="${test.dir}/src"/>
	
	<property name="core.lib.dir" location="${core.dir}/lib"/>
	<property name="jena.lib.dir" location="${jena.dir}/lib"/>
	<property name="owlapiv3.lib.dir" location="${owlapiv3.dir}/lib"/>
	<property name="pellint.lib.dir" location="${pellint.dir}/lib"/>
	<property name="profiler.lib.dir" location="${profiler.dir}/lib"/>
	<property name="query.lib.dir" location="${query.dir}/lib"/>
	<property name="test.lib.dir" location="${test.dir}/lib"/>
	
	<property name="build.dir" location="build"/>
	<property name="build.cli.class.dir" location="${build.dir}/cli/class"/>
	<property name="build.examples.class.dir" location="${build.dir}/examples/class"/>
	<property name="build.explanation.class.dir" location="${build.dir}/explanation/class"/>
	<property name="build.jena.class.dir" location="${build.dir}/jena/class"/>
	<property name="build.modularity.class.dir" location="${build.dir}/modularity/class"/>
	<property name="build.owlapiv3.class.dir" location="${build.dir}/owlapiv3/class"/>
	<property name="build.pellint.class.dir" location="${build.dir}/pellint/class"/>
	<property name="build.profiler.class.dir" location="${build.dir}/profiler/class"/>
	<property name="build.query.class.dir" location="${build.dir}/query/class"/>
	<property name="build.root.class.dir" location="${build.dir}/root/class"/>
	<property name="build.test.class.dir" location="${build.dir}/test/class"/>
	
	<property name="dist.dir" location="dist"/>
	<property name="dist.doc.dir" location="${dist.dir}/doc"/>
	<property name="dist.examples.dir" location="${dist.dir}/examples"/>
	<property name="dist.lib.dir" location="${dist.dir}/lib"/>
	<property name="dist.src.dir" location="${dist.dir}/src"/>
	
	<property name="dist.lib.core.dir" location="${dist.dir}/lib/core"/>
	<property name="dist.lib.datatypes.dir" location="${dist.dir}/lib/datatypes"/>
	<property name="dist.lib.jena.dir" location="${dist.dir}/lib/jena"/>
	<property name="dist.lib.owlapiv3.dir" location="${dist.dir}/lib/owlapiv3"/>
	<property name="dist.lib.pellint.dir" location="${dist.dir}/lib/pellint"/>
	<property name="dist.lib.profiler.dir" location="${dist.dir}/lib/profiler"/>
	<property name="dist.lib.test.dir" location="${dist.dir}/lib/test"/>
	
	<property name="pellet.cli.jar" value="${dist.lib.dir}/pellet-cli.jar"/>
	<property name="pellet.core.jar" value="${dist.lib.dir}/pellet-core.jar"/>
	<property name="pellet.datatypes.jar" value="${dist.lib.dir}/pellet-datatypes.jar"/>
	<property name="pellet.el.jar" value="${dist.lib.dir}/pellet-el.jar"/>
	<property name="pellet.examples.jar" value="${dist.lib.dir}/pellet-examples.jar"/>
	<property name="pellet.explanation.jar" value="${dist.lib.dir}/pellet-explanation.jar"/>
	<property name="pellet.jena.jar" value="${dist.lib.dir}/pellet-jena.jar"/>
	<property name="pellet.modularity.jar" value="${dist.lib.dir}/pellet-modularity.jar"/>
	<property name="pellet.owlapiv3.jar" value="${dist.lib.dir}/pellet-owlapiv3.jar"/>
	<property name="pellet.pellint.jar" value="${dist.lib.dir}/pellet-pellint.jar"/>
	<property name="pellet.profiler.jar" value="${dist.lib.dir}/pellet-profiler.jar"/>
	<property name="pellet.query.jar" value="${dist.lib.dir}/pellet-query.jar"/>
	<property name="pellet.root.jar" value="${dist.lib.dir}/pellet-root.jar"/>
	<property name="pellet.rules.jar" value="${dist.lib.dir}/pellet-rules.jar"/>
	<property name="pellet.test.jar" value="${dist.lib.dir}/pellet-test.jar"/>
	
	<property name="pellet.cli.src.jar" value="${dist.src.dir}/pellet-cli-src.jar"/>
	<property name="pellet.core.src.jar" value="${dist.src.dir}/pellet-core-src.jar"/>
	<property name="pellet.datatypes.src.jar" value="${dist.src.dir}/pellet-datatypes-src.jar"/>
	<property name="pellet.el.src.jar" value="${dist.src.dir}/pellet-el-src.jar"/>
	<property name="pellet.explanation.src.jar" value="${dist.src.dir}/pellet-explanation-src.jar"/>
	<property name="pellet.jena.src.jar" value="${dist.src.dir}/pellet-jena-src.jar"/>
	<property name="pellet.modularity.src.jar" value="${dist.src.dir}/pellet-modularity-src.jar"/>
	<property name="pellet.owlapiv3.src.jar" value="${dist.src.dir}/pellet-owlapiv3-src.jar"/>
	<property name="pellet.pellint.src.jar" value="${dist.src.dir}/pellet-pellint-src.jar"/>
	<property name="pellet.query.src.jar" value="${dist.src.dir}/pellet-query-src.jar"/>
	<property name="pellet.root.src.jar" value="${dist.src.dir}/pellet-root-src.jar"/>
	<property name="pellet.rules.src.jar" value="${dist.src.dir}/pellet-rules-src.jar"/>
	<property name="pellet.test.src.jar" value="${dist.src.dir}/pellet-test-src.jar"/>
	
	<property name="doc.dir" location="doc"/>
	<property name="javadoc.dir" location="${doc.dir}/javadoc"/>
	<property name="project.name" value="pellet"/>
	<property name="project.version.number" value="2.3.1"/>
	<property name="pellet.cli.class" value="pellet.Pellet"/>
	<property name="pellet.explanation.class" value="com.clarkparsia.explanation.Explain"/>
	<property name="version.file" value="org/mindswap/pellet/version.properties"/>
	<property name="project.version.file"
		value="${build.root.class.dir}/${version.file}"/>
	<property name="project.version.template"
		value="${core.src.dir}/${version.file}.in"/>
	<property name="test.class.name"
		value="org.mindswap.pellet.test.PelletTestSuite"/>
	<property name="test.skip.issues" value="true"/>

    <property name="qa.dir" location="qa"/>
    <property name="release.scripts.dir" location="release-scripts"/>
    <property name="bash" location="/bin/bash"/>    

	<property name="antlr.jar.file" location="${query.lib.dir}/antlr/antlr-3.2.jar" />
	
	<!--
	******************** SETUP ********************
	-->
	
	<path id="project.class.path">
		<pathelement location="${build.root.class.dir}"/>
		<pathelement location="${build.explanation.class.dir}"/>
		<pathelement location="${build.modularity.class.dir}"/>
		<pathelement location="${build.owlapiv3.class.dir}"/>
		<pathelement location="${build.jena.class.dir}"/>
		<pathelement location="${build.query.class.dir}"/>
		<pathelement location="${build.cli.class.dir}"/>
		<pathelement location="${build.test.class.dir}"/>
		<pathelement location="${build.profiler.class.dir}"/>
		<pathelement location="${build.pellint.class.dir}"/>
		<pathelement location="${test.lib.dir}"/>
		<fileset dir="${test.lib.dir}">
			<include name="**/*.jar"/>
			<exclude name="**/${project.name}*.jar"/>
		</fileset>
		<pathelement location="${jena.lib.dir}"/>
		<fileset dir="${jena.lib.dir}">
			<include name="**/*.jar"/>
			<exclude name="**/${project.name}*.jar"/>
		</fileset>
		<pathelement location="${owlapiv3.lib.dir}"/>
		<fileset dir="${owlapiv3.lib.dir}">
			<include name="**/*.jar"/>
			<exclude name="**/${project.name}*.jar"/>
		</fileset>
		<pathelement location="${core.lib.dir}"/>
		<fileset dir="${core.lib.dir}">
			<include name="**/*.jar"/>
			<exclude name="**/${project.name}*.jar"/>
		</fileset>
		<pathelement location="${profiler.lib.dir}"/>
		<fileset dir="${profiler.lib.dir}">
			<include name="**/*.jar"/>
			<exclude name="**/${project.name}*.jar"/>
		</fileset>
		<pathelement location="${query.lib.dir}"/>
		<fileset dir="${query.lib.dir}">
			<include name="**/*.jar"/>
			<exclude name="**/${project.name}*.jar"/>
		</fileset>
		<pathelement location="${pellint.lib.dir}"/>
		<fileset dir="${pellint.lib.dir}">
			<include name="**/*.jar"/>
			<exclude name="**/${project.name}*.jar"/>
		</fileset>
	</path>
	
	<target name="init">
		<pathconvert targetos="unix" property="classpath" refid="project.class.path"/>
		<!--
		<echo>CLASSPATH=${classpath}</echo>
		-->
		<tstamp/>
		<mkdir dir="${build.examples.class.dir}"/>
		<mkdir dir="${build.profiler.class.dir}"/>
		<mkdir dir="${build.explanation.class.dir}"/>
		<mkdir dir="${build.modularity.class.dir}"/>
		<mkdir dir="${build.root.class.dir}"/>
		<mkdir dir="${build.owlapiv3.class.dir}"/>
		<mkdir dir="${build.jena.class.dir}"/>
		<mkdir dir="${build.query.class.dir}"/>
		<mkdir dir="${build.cli.class.dir}"/>
		<mkdir dir="${build.test.class.dir}"/>
		<mkdir dir="${build.pellint.class.dir}"/>
		<mkdir dir="${dist.src.dir}"/>
	</target>
	
	<!--
	******************** COMPILE ********************
	-->
	
	<target name="compile"
		depends="init,compile-pellet,compile-examples,compile-profiler"
		description="Compile source files.">
	</target>
	
	<target name="compile-examples" depends="init,compile-pellet">
		<javac source="1.5" target="1.5" srcdir="${examples.src.dir}"
			destdir="${build.examples.class.dir}" debug="yes" deprecation="no">
			<classpath refid="project.class.path"/>
		</javac>
	</target>
	
	<target name="compile-profiler" depends="init,compile-pellet">
		<javac source="1.5" target="1.5" srcdir="${profiler.src.dir}"
			destdir="${build.profiler.class.dir}" debug="yes" deprecation="no">
			<classpath refid="project.class.path"/>
		</javac>
	</target>
	
	<target name="compile-pellet"
		depends="init,compile-root,compile-owlapiv3,compile-modularity,compile-jena,compile-query,compile-cli,compile-test">
	</target>
	
	<target name="compile-root" depends="init">
		<javac source="1.5" target="1.5" destdir="${build.root.class.dir}"
			debug="yes" deprecation="no">
			<src path="${core.src.dir}"/>
			<src path="${datatypes.src.dir}"/>
			<src path="${rules.src.dir}"/>
			<src path="${el.src.dir}"/>
			<classpath refid="project.class.path"/>
		</javac>
	</target>
	
	<target name="compile-owlapiv3" depends="init,compile-root,compile-query">
		<javac source="1.5" target="1.5" destdir="${build.owlapiv3.class.dir}"
			debug="yes" deprecation="no">
			<src path="${owlapiv3.src.dir}"/>
			<classpath refid="project.class.path"/>
		</javac>
	</target>
	
	<target name="compile-explanation" depends="init,compile-root,compile-owlapiv3">
		<javac source="1.5" target="1.5" destdir="${build.explanation.class.dir}" debug="yes" deprecation="no">
			<src path="${explanation.src.dir}"/>
			<classpath refid="project.class.path"/>
		</javac>
	</target>
		
	<target name="compile-modularity" depends="init,compile-root,compile-owlapiv3">
		<javac source="1.5" target="1.5" destdir="${build.modularity.class.dir}" debug="yes" deprecation="no">
			<src path="${modularity.src.dir}"/>
			<classpath refid="project.class.path"/>
		</javac>
	</target>
	
	<target name="compile-jena" depends="init,compile-root">
		<javac source="1.5" target="1.5" destdir="${build.jena.class.dir}"
			debug="yes" deprecation="no">
			<src path="${jena.src.dir}"/>
			<classpath refid="project.class.path"/>
		</javac>
	</target>
	
	<target name="clean-query-parsers">
		<delete dir="${query.gensrc.root.dir}"/>
	</target>		
	
	<target name="generate-query-parsers">
		<delete quiet="true">
			<fileset dir="${query.genparser.src.dir}" includes="*.tokens" />
		</delete>
		<java classname="org.antlr.Tool" fork="true" maxmemory="512m" classpath="${antlr.jar.file}" failonerror="true">
			<arg value="-o" />
			<arg value="${query.genparser.src.dir}" />
			<arg path="${query.grammar.src.dir}/SparqlOwl.g" />
			<arg path="${query.grammar.src.dir}/SparqlOwlTreeARQ.g" />
		</java>
	</target>

	<target name="compile-query" depends="init,compile-root,compile-jena">
		<javac source="1.5" target="1.5" destdir="${build.query.class.dir}"
			debug="yes" deprecation="no">
			<src path="${query.src.dir}"/>
			<src path="${query.gensrc.root.dir}"/>
			<classpath refid="project.class.path"/>
		</javac>
	</target>
	
	<target name="compile-pellint" depends="init,compile-root">
		<javac source="1.5" target="1.5" destdir="${build.pellint.class.dir}"
			debug="yes" deprecation="no">
			<src path="${pellint.src.dir}"/>
			<classpath refid="project.class.path"/>
		</javac>
	</target>
	
	<target name="compile-cli"
		depends="init,compile-root,compile-owlapiv3,compile-jena,compile-query,compile-explanation,compile-modularity,compile-pellint">
		<javac source="1.5" target="1.5" destdir="${build.cli.class.dir}"
			debug="yes" deprecation="no">
			<src path="${cli.src.dir}"/>
			<classpath refid="project.class.path"/>
		</javac>
	</target>
	
	<target name="compile-test"
		depends="init,compile-root,compile-owlapiv3,compile-jena,compile-query,compile-cli,compile-modularity,compile-explanation">
		<javac source="1.5" target="1.5" destdir="${build.test.class.dir}"
			debug="yes" deprecation="no">
			<src path="${test.src.dir}"/>
			<classpath refid="project.class.path"/>
		</javac>
	</target>
	
	<!--
	******************** BUILD ********************
	-->
	
	<target name="build" depends="compile,copy-version-info"
		description="Compile sources and copy data files into build directory.">
		<copy todir="${build.root.class.dir}">
			<fileset dir="${core.src.dir}">
				<exclude name="**/*.java"/>
			</fileset>
			<fileset dir=".">
				<include name="images/*"/>
			</fileset>
		</copy>
	</target>
	
	<target name="copy-version-info" depends="label-date">
		<copy file="${project.version.template}" tofile="${project.version.file}"
			overwrite="true"/>
		<echo message="${project.version.label}"/>
		<replace file="${project.version.file}">
			<replacefilter token="$$$$VERSION" value="${project.version.label}"/>
			<replacefilter token="$$$$DATE" value="${TODAY}"/>
		</replace>
	</target>
	
	<!--
	******************** TEST ********************
	-->
	
	<target name="test" depends="build">
		<junit maxmemory="1536m" fork="yes" haltonfailure="false" dir="${basedir}"
			failureproperty="pellet.junit.failure">
			<test name="${test.class.name}"/>
			<formatter type="brief" usefile="false"/>
			<formatter type="xml" usefile="true" if="pellet.junit.formatter.xml"/>
			<classpath refid="project.class.path"/>
			<jvmarg value="-enableassertions" />
		</junit>
		<fail if="pellet.junit.failure" message="JUnit test failure."/>
	</target>
	
	<!--
	******************** DIST ********************
	-->
	
	<target name="dist" depends="build,distfiles"
		description="Generate a distribution">
		<mkdir dir="${dist.lib.dir}"/>
	
		<jar jarfile="${pellet.cli.src.jar}" basedir="${cli.src.dir}"/>
		<jar jarfile="${pellet.core.src.jar}" basedir="${core.src.dir}"/>
		<jar jarfile="${pellet.datatypes.src.jar}" basedir="${datatypes.src.dir}"/>
		<jar jarfile="${pellet.el.src.jar}" basedir="${el.src.dir}"/>
		<jar jarfile="${pellet.explanation.src.jar}" basedir="${explanation.src.dir}"/>
		<jar jarfile="${pellet.jena.src.jar}" basedir="${jena.src.dir}"/>
		<jar jarfile="${pellet.modularity.src.jar}" basedir="${modularity.src.dir}"/>
		<jar jarfile="${pellet.owlapiv3.src.jar}" basedir="${owlapiv3.src.dir}"/>
		<jar jarfile="${pellet.query.src.jar}" basedir="${query.src.dir}">
			<fileset dir="${query.grammar.src.dir}"/>
		</jar>
		<jar jarfile="${pellet.rules.src.jar}" basedir="${rules.src.dir}"/>
		<jar jarfile="${pellet.test.src.jar}" basedir="${test.src.dir}"/>
		<jar jarfile="${pellet.pellint.src.jar}" basedir="${pellint.src.dir}"/>
		
		<jar jarfile="${pellet.owlapiv3.jar}" basedir="${build.owlapiv3.class.dir}"/>
		<jar jarfile="${pellet.modularity.jar}" basedir="${build.modularity.class.dir}"/>
		<jar jarfile="${pellet.jena.jar}" basedir="${build.jena.class.dir}"/>
		<jar jarfile="${pellet.query.jar}" basedir="${build.query.class.dir}"/>
		<jar jarfile="${pellet.test.jar}" basedir="${build.test.class.dir}"/>
		<jar jarfile="${pellet.explanation.jar}" basedir="${build.explanation.class.dir}"/>	
<!--
		<jar jarfile="${pellet.examples.jar}" basedir="${build.examples.class.dir}"/>
		<jar jarfile="${pellet.profiler.jar}" basedir="${build.profiler.class.dir}"/>
-->
		<jar jarfile="${pellet.pellint.jar}">
			<fileset dir="${build.pellint.class.dir}">
				<include name="**/**"/>
			</fileset>
			<fileset dir="${pellint.src.dir}">
				<include name="pellint.properties"/>
			</fileset>
		</jar>
		<jar jarfile="${pellet.datatypes.jar}">
			<fileset dir="${build.root.class.dir}">
				<include name="org/mindswap/pellet/datatypes/**"/>
				<include name="com/clarkparsia/pellet/datatypes/**"/>
			</fileset>
		</jar>
		<jar jarfile="${pellet.rules.jar}">
			<fileset dir="${build.root.class.dir}">
				<include name="com/clarkparsia/pellet/rules/**"/>
			</fileset>
		</jar>
		<jar jarfile="${pellet.el.jar}">
			<fileset dir="${build.root.class.dir}">
				<include name="com/clarkparsia/pellet/el/**"/>
			</fileset>
		</jar>
		<jar jarfile="${pellet.core.jar}">
			<fileset dir="${build.root.class.dir}">
				<include name="**"/>
				<exclude name="com/clarkparsia/pellet/el/**"/>
				<exclude name="org/mindswap/pellet/query/**"/>
				<exclude name="com/clarkparsia/pellet/sparqldl/**"/>
				<exclude name="org/mindswap/pellet/jena/**"/>
				<exclude name="com/clarkparsia/pellet/rules/**"/>
				<exclude name="org/mindswap/pellet/datatypes/**"/>
				<exclude name="com/clarkparsia/pellet/datatypes/**"/>
			</fileset>
		</jar>
		
		<!-- Copy third party libraries -->
		<copy todir="${dist.lib.dir}">
			<fileset dir="${test.lib.dir}">
				<include name="**/*.jar"/>
				<include name="**/*.txt"/>
			</fileset>
			<fileset dir="${jena.lib.dir}">
				<include name="**/*.jar"/>
				<include name="**/*.txt"/>
			</fileset>
			<fileset dir="${owlapiv3.lib.dir}">
				<include name="**/*.jar"/>
				<include name="**/*.txt"/>
			</fileset>
			<fileset dir="${core.lib.dir}">
				<include name="**/*.jar"/>
				<include name="**/*.txt"/>
			</fileset>
			<fileset dir="${pellint.lib.dir}">
				<include name="**/*.jar"/>
				<include name="**/*.txt"/>
			</fileset>
			<fileset dir="${query.lib.dir}">
				<include name="**/*.jar"/>
				<exclude name="antlr/antlr-3.2.jar"/>
				<include name="**/*.txt"/>
			</fileset>
<!--
			<fileset dir="${profiler.lib.dir}">
				<include name="**/*.jar"/>
				<include name="**/*.txt"/>
			</fileset>
-->
		</copy>
		
		<!-- Generate relative classpath for jar file -->
		<pathconvert dirsep="/" pathsep=" " property="Class-Path">
			<map from="${dist.lib.dir}/" to=""/>
			<map from="${dist.lib.dir}\" to=""/>
			<!--" (dumb vim problem with quotes)-->
			<path>
				<fileset dir="${dist.lib.dir}">
					<include name="**/*.jar"/>
					<!-- Excluding the OWLAPIv2 jars here -->
					<exclude name="owlapi/*.jar"/>
				</fileset>
			</path>
			<!-- Putting the OWLAPIv2 jars at the end of classpath (fix for bug 481) -->
			<path>
				<fileset dir="${dist.lib.dir}">
					<include name="owlapi/*.jar"/>
				</fileset>
			</path>
		</pathconvert>
		
		<jar jarfile="${pellet.cli.jar}" basedir="${build.cli.class.dir}">
			<manifest>
				<attribute name="Main-Class" value="${pellet.cli.class}"/>
				<attribute name="Class-Path" value="${Class-Path}"/>
			</manifest>
		</jar>		
	</target>
	
	<target name="distfiles">	
		<copy todir="${dist.dir}">
			<fileset dir="">
				<include name="agpl-3.0.txt"/>
				<include name="BUGS.txt"/>
				<include name="CHANGES.txt"/>
				<include name="HOW_TO_FILE_PELLET_BUG_REPORT.txt"/>
				<include name="doc/**"/>
				<include name="licensing/**"/>
				<include name="examples/**"/>
				<include name="LICENSE.txt"/>
				<include name="pellet.bat"/>
				<include name="pellet.sh"/>
				<include name="README.*"/>
			</fileset>
		</copy>		

		<copy todir="${dist.examples.dir}" file="${core.src.dir}/pellet.properties"/>
		<copy todir="${dist.examples.dir}" file="${pellint.src.dir}/pellint.properties"/>
		<copy todir="${dist.doc.dir}">
			<fileset dir="pellint">
				<include name="PELLINT-README.txt"/>
				<include name="PELLINT-PATTERNS.txt"/>
			</fileset>
		</copy>
		
		<chmod dir="${dist.dir}" includes="*.sh" perm="+x"/>
	</target>
	
	<!--
	******************** ZIP ********************
	-->
	
	<target name="zip" depends="label-date,dist,javadoc"
		description="Build a zipfile containing source and binaries.">
		<condition property="project.dirname" value="${project.name}-${DSTAMP}">
			<not>
				<isset property="project.dirname"/>
			</not>
		</condition>
		<!-- Copy the javadocs -->
		<copy todir="${dist.dir}">
			<fileset dir="">
				<include name="doc/**"/>
			</fileset>
		</copy>
		<zip destfile="${dist.dir}/${project.dirname}.zip">
			<zipfileset dir="${dist.dir}" prefix="${project.dirname}">
				<include name="**/*"/>
				<exclude name="**/*.zip"/>
	            <exclude name="*.sh"/>
			</zipfileset>
			<zipfileset dir="${dist.dir}" prefix="${project.dirname}" filemode="755">
				<include name="*.sh"/>
			</zipfileset>
		</zip>
	</target>
	
	<target name="label-date" depends="init">
		<property name="project.version.label" value="${DSTAMP}"/>
		<property name="project.label" value="${project.name}-${DSTAMP}"/>
	</target>
	
	<target name="label-nightly" depends="init">
		<property name="project.version.label" value="nightly-build-${DSTAMP}"/>
		<property name="project.label" value="${project.name}-nightly"/>
	</target>
	
	<target name="label-release" depends="init">
		<property name="project.version.label" value="${project.version.number}"/>
		<property name="project.label"
			value="${project.name}-${project.version.number}"/>
	</target>
	
	<!--
	******************** JAVADOC ********************
	-->
	
	<target name="javadoc" depends="build">
		<javadoc destdir="${javadoc.dir}" access="public" use="true" notree="false"
			nonavbar="false" noindex="false" splitindex="true" author="true"
			version="true" nodeprecatedlist="false" nodeprecated="false"
			packagenames="org.mindswap.pellet.*"
			doctitle="${project.name}-${project.version.label}"
			bottom="Copyright &#169; 2004 Evren Sirin. All Rights Reserved.">
			<classpath refid="project.class.path"/>
			<fileset dir="${core.src.dir}" defaultexcludes="yes">
				<include name="**/*.java"/>
			</fileset>
			<fileset dir="${modularity.src.dir}" defaultexcludes="yes">
				<include name="**/*.java"/>
			</fileset>
			<fileset dir="${datatypes.src.dir}" defaultexcludes="yes">
				<include name="**/*.java"/>
			</fileset>
			<fileset dir="${rules.src.dir}" defaultexcludes="yes">
				<include name="**/*.java"/>
			</fileset>
			<fileset dir="${query.src.dir}" defaultexcludes="yes">
				<include name="**/*.java"/>
			</fileset>
			<fileset dir="${jena.src.dir}" defaultexcludes="yes">
				<include name="**/*.java"/>
			</fileset>
			<fileset dir="${el.src.dir}" defaultexcludes="yes">
				<include name="**/*.java"/>
			</fileset>
			<fileset dir="${owlapiv3.src.dir}" defaultexcludes="yes">
				<include name="**/*.java"/>
			</fileset>
			<fileset dir="${cli.src.dir}" defaultexcludes="yes">
				<include name="**/*.java"/>
			</fileset>
			<fileset dir="${pellint.src.dir}" defaultexcludes="yes">
				<include name="**/*.java"/>
			</fileset>
		</javadoc>
	</target>
	
	<!--
	******************** RELEASE ********************
	-->
	
	<target name="release" depends="label-release">
		<property name="project.dirname"
			value="${project.name}-${project.version.label}"/>
		<antcall target="zip"/>
	</target>
	
	<target name="nightly-release" depends="label-nightly">
		<property name="project.dirname" value="${project.name}-nightly"/>
		<antcall target="zip"/>
	</target>

    <target name="prepare-qa-files" depends="release">
      <copy file="${dist.dir}/${project.dirname}.zip" todir="${qa.dir}"/>
    </target>

    <target name="fuzz-tests" depends="prepare-qa-files">
      <exec executable="${bash}" failonerror="true">
        <arg file="${release.scripts.dir}/fuzz-tests.sh"/>
        <arg path="${qa.dir}"/>
        <arg value="${project.dirname}"/>
      </exec>
    </target>

    <target name="pass-qa" depends="fuzz-tests">
    </target>

    <target name="deploy" depends="pass-qa">
      <property file="deploy.properties"/>
      <exec executable="${bash}" failonerror="true">
        <arg file="${release.scripts.dir}/deploy.sh"/>
        <arg path="${dist.dir}/${project.dirname}.zip"/>
        <arg value="${project.version.label}"/>
        <arg value="${deploy.host}"/>
        <arg value="${deploy.user}"/>
        <arg value="${deploy.home}/${deploy.user}"/>
        <arg value="${deploy.download.dir}"/>
        <arg value="${deploy.registration.servlet.properties}"/>
      </exec>
    </target>

	
	<!--
	******************** CLEAN ********************
	-->
	
	<target name="clean" description="Clean up build files">
		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete dir="${javadoc.dir}"/>
		<delete dir="${qa.dir}"/>
	</target>
	
</project>
