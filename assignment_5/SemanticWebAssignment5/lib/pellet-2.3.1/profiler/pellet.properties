# Set the following option to turn on/off Unique Name Assumption (UNA). 
# Warning: OWL semantics require not to use UNA 
#   
# Allowed values: true, false
# Default value : false
USE_UNIQUE_NAME_ASSUMPTION = false

# Turn on/off pseudo nominal.
# Warning: Reasoning is incomplete when pseudo nominals are used 
#  
# Allowed values: true, false
# Default value : false
USE_PSEUDO_NOMINALS = false

# Display a progress monitor whenever classification is done
#
# Allowed values: none, console, swing
# Default value : none
USE_CLASSIFICATION_MONITOR = none

# The ratio of individuals that will be inspected while generating the size
# estimate. The query reordering optimization uses size estimates for classes 
# and properties to estimate the cost of a certain query ordering. The size
# estimates are computed by random sampling. Increasing the sampling ratio 
# yields more accurate results but is very costly for large ABoxes. Setting
# the value to 0 disables size estimation the query engine will not reorder 
# the query. 
#  
# Allowed values: A value between 0 and 1
# Default value : 0.2
SAMPLING_RATIO = 0.2

# This option controls if the size estimates for all the classes and properties
# in a KB will be computed fully when the PelletQueryExecution object is created.
#    
# Allowed values: true, false
# Default value : true
FULL_SIZE_ESTIMATE = false

# Control the realization strategy where we loop over individuals or concepts.
# When this flag is set we loop over each individual and find the most specific
# type for that individual by traversing the class hierarchy. If this flag is 
# not set, we traverse the class hierarchy and for each concept find the instances.
# Then any individual that is also an instance of a subclass is removed. Both
# techniques have advantages and disadvantages. Best performance depends on the
# ontology characteristics. 
#  
# Allowed values: true, false
# Default value : true
REALIZE_INDIVIDUAL_AT_A_TIME = false

# With this option all triples that contains an unrecognized term from
# RDF, RDF-S, OWL, OWL 1.1, or XSD namespaces will be ignored.
#  
# Allowed values: true, false
# Default value : true
FREEZE_BUILTIN_NAMESPACES = true

# This option causes all classes and properties defined as deprecated
# (using <code>owl:DeprecetedClass</code> or <code>owl:DeprecetedProperty</code>)
# to be ignored. If turned off, these will be treated as ordinary
# classes and properties.
#  
# Allowed values: true, false
# Default value : true
IGNORE_DEPRECATED_TERMS = true 

# This option controls the behavior of Pellet while an ontology is being
# loaded. Some axioms, e.g. cardinality restrictions on transitive
# properties, is not supported by Pellet. If an axiom is used in the input
# ontology Pellet can just ignore that axiom (and print a warning) or
# simply throw an exception at the time that axiom is added to the KB.
# Default behavior is to ignore unsupported axioms.
#  
# Allowed values: true, false
# Default value : true
IGNORE_UNSUPPORTED_AXIOMS = true 

# This option tells the reasoner to enable support for DL-safe rules
# (encoded in SWRL). If the value is set to ture then the rules will be
# taken into account during reasoning. Otherwise, rules will simply be
# ignored by the reasoner. Note that, some SWRL features such as
# DatavaluedPropertyAtom and BuiltinAtom is not supported. The behavior for
# what happens when rules containing such atoms is controlled by the
# IGNORE_UNSUPPORTED_AXIOMS option (see above), e.g. such rules can be ignored
# or reasoner can throw an exception.
#  
# Allowed values: true, false
# Default value : true
DL_SAFE_RULES = true 

# Cache the pseudo models for named classes during satisfiability check
# and use the cached models for finding non-subsumptions during 
# classification without performing an expensive satisfiabilty check. 
# This is a very effective optimization and turning it off will reduce
# reasoning performance significantly.
#  
# Allowed values: true, false
# Default value : true
USE_CACHING = true 

# Cache the pseudo models for class expressions so tableau completion
# rules will not be applied to nodes satisfiability status is already 
# cached. This is a very effective optimization but only applicable 
# when there are no inverses or nominals in the input ontology. Also
# for relatively large ontologies many satisfiability checks will cause
# the cache to get very large and run out of memory.
#  
# Allowed values: true, false
# Default value : true
USE_ADVANCED_CACHING = true 


# This option controls the behavior of PelletInfGraph.getDeductionsGraph()
# function affecting in turn how InfModel.getDeductionsGraph() behave. Jena
# documentation describes this function to apply only to forward-chaining
# rule engines which does not include Pellet. The behavior of this function
# in Pellet prior to 1.5.1 release was to return an incomplete subset of
# all the inferences that the reasoner can compute from the base model.
# This is obviously not correct and Pellet should simply return null for
# this function according to the Jena documentation. But considering that 
# the incorrect behavior of this function might already be being used by 
# the users, Pellet 1.5.1 introduces this option for backward compatibility 
# and forces PelletInfGraph return to the previous incorrect behavior.
# 
# This option is introduced as a temporary solution for backward
# compatibility and is scheduled to be removed in future releases. One
# should avoid using InfGraph.getDeductionsGraph()
# (similarly InfModel.getDeductionsModel()) with Pellet.
# Model.listStatements() can be used to retrieve all the asserted and
# inferred statements.
#
# Allowed values: true, false
# Default value : false
RETURN_DEDUCTIONS_GRAPH = false

